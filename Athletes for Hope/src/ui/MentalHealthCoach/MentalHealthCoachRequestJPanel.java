/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.MentalHealthCoach;

import business.EcoSystem;
import business.Network.Network;
import business.Organization.TalentScoutOrganization;
import business.Organization.Organization;
import business.UserAccount.UserAccount;
import business.WorkQueue.TalentScoutWorkRequest;
import business.WorkQueue.MentalHealthCoachWorkRequest;
import business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author hp
 */
public class MentalHealthCoachRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form MentalHealthCoachRequestJPanel
     */
    JPanel userProcessContainer;
    EcoSystem system;
    UserAccount userAccount;
    Organization organization;
    MentalHealthCoachWorkRequest request;
    Network network;
    public MentalHealthCoachRequestJPanel(JPanel userProcessContainer, EcoSystem system, UserAccount userAccount,Organization organization,Network network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.organization= organization;
        this.userAccount = userAccount;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblHeader = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPsychiatristRequestDetails = new javax.swing.JTable();
        btnAssignRequest = new javax.swing.JButton();
        btnEncounters = new javax.swing.JButton();
        btnCaseComplete = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        lblHeader.setFont(new java.awt.Font("Monaco", 1, 36)); // NOI18N
        lblHeader.setForeground(new java.awt.Color(255, 146, 1));
        lblHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeader.setText("Manage Requests");

        tblPsychiatristRequestDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Type", "Status", "Assigned to"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPsychiatristRequestDetails);

        btnAssignRequest.setBackground(new java.awt.Color(255, 146, 1));
        btnAssignRequest.setFont(new java.awt.Font("Monaco", 1, 18)); // NOI18N
        btnAssignRequest.setForeground(new java.awt.Color(255, 255, 255));
        btnAssignRequest.setText("Assign Request");
        btnAssignRequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAssignRequestMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAssignRequestMouseExited(evt);
            }
        });
        btnAssignRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignRequestActionPerformed(evt);
            }
        });

        btnEncounters.setBackground(new java.awt.Color(255, 146, 1));
        btnEncounters.setFont(new java.awt.Font("Monaco", 1, 18)); // NOI18N
        btnEncounters.setForeground(new java.awt.Color(255, 255, 255));
        btnEncounters.setText("Consultation");
        btnEncounters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncountersActionPerformed(evt);
            }
        });

        btnCaseComplete.setBackground(new java.awt.Color(255, 146, 1));
        btnCaseComplete.setFont(new java.awt.Font("Monaco", 1, 18)); // NOI18N
        btnCaseComplete.setForeground(new java.awt.Color(255, 255, 255));
        btnCaseComplete.setText("Case Complete");
        btnCaseComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaseCompleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAssignRequest, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEncounters, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCaseComplete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(71, 71, 71)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE)
                .addGap(256, 256, 256))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(lblHeader)
                .addGap(59, 59, 59)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(btnAssignRequest)
                        .addGap(18, 18, 18)
                        .addComponent(btnEncounters)
                        .addGap(18, 18, 18)
                        .addComponent(btnCaseComplete)))
                .addContainerGap(236, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1300, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignRequestMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAssignRequestMouseEntered
        btnAssignRequest.setForeground(new Color(0,128,128));        // TODO add your handling code here:
    }//GEN-LAST:event_btnAssignRequestMouseEntered

    private void btnAssignRequestMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAssignRequestMouseExited
        btnAssignRequest.setForeground(Color.black);        // TODO add your handling code here:
    }//GEN-LAST:event_btnAssignRequestMouseExited

    private void btnAssignRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignRequestActionPerformed

        try{
         int selectedRow = tblPsychiatristRequestDetails.getSelectedRow();
        MentalHealthCoachWorkRequest request = (MentalHealthCoachWorkRequest)tblPsychiatristRequestDetails.getValueAt(selectedRow, 2);
        if (CheckOpenCases(userAccount) == 0){
            request.setReceiver(userAccount);
            request.setStatus("Accepted");
            populateTable();
            sendInvite(request);
        }else
        {
            JOptionPane.showMessageDialog(null, "Only one case can be accepted at a time");
        }   
        } catch (Exception e){
            JOptionPane.showMessageDialog(null, "Please select any one row from table");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnAssignRequestActionPerformed

    private void btnEncountersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncountersActionPerformed

        int selectedRow = tblPsychiatristRequestDetails.getSelectedRow();

        DefaultTableModel model=(DefaultTableModel) tblPsychiatristRequestDetails.getModel();
        String s= tblPsychiatristRequestDetails.getValueAt(selectedRow, 2).toString();
        String status="Waiting";
        if(status.equalsIgnoreCase(s))
        {
            JOptionPane.showMessageDialog(null, "Access Denied");
        }
        else{
            if (selectedRow < 0){
                return;
            }
            MentalHealthCoachWorkRequest request = (MentalHealthCoachWorkRequest)tblPsychiatristRequestDetails.getValueAt(selectedRow, 2);

            if (request.getReceiver()!=userAccount){
                JOptionPane.showMessageDialog(this, "You cannot view the report of this case. Access Denied.");
            }else{
                MentalHealthCoachConsultationJPanel lencounterJPanel = new MentalHealthCoachConsultationJPanel(userProcessContainer,system,userAccount,network,organization,request);
                userProcessContainer.add("caseReportJPanel", lencounterJPanel);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);

            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEncountersActionPerformed

    private void btnCaseCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCaseCompleteActionPerformed
        int selectedRow = tblPsychiatristRequestDetails.getSelectedRow();

        if (selectedRow < 0){
            return;
        }

        WorkRequest request = (MentalHealthCoachWorkRequest)tblPsychiatristRequestDetails.getValueAt(selectedRow, 2);
        request.setReceiver(userAccount);
        request.setStatus("Case Completed");
        populateTable();
    }//GEN-LAST:event_btnCaseCompleteActionPerformed
    
    private void populateTable() {
        DefaultTableModel model= (DefaultTableModel) tblPsychiatristRequestDetails.getModel();
        Object[] row=new Object[4];
        model.setRowCount(0);
        
         for(MentalHealthCoachWorkRequest request : organization.getWorkQueue().getMentalHealthCoachWorkRequestList())
         {
         
            row[0]=request.getTalentScoutWorkRequest().getChildName();
            row[1] = request.getTalentScoutWorkRequest().getSportType();
            row[2] = request;
            if (request.getReceiver()==null){
              row[3] = "Not Assigned";
            }else{
              row[3] = request.getReceiver();
            }
            model.addRow(row);
        }
    }
    
    private void sendInvite(MentalHealthCoachWorkRequest request) {
        String FromEmail="sexualawareness.help@gmail.com";
        String FromEmailPass="Fin@lProject21";
        String Subject = "Sign up successful";
        
        Properties properties=new Properties();
        properties.put("mail.smtp.auth", "true");
        properties.put("mail.smtp.starttls.enable", "true");
        properties.put("mail.smtp.host", "smtp.gmail.com");
        properties.put("mail.smtp.port", "587");
        
        Session session=Session.getDefaultInstance(properties, new javax.mail.Authenticator(){
           @Override
            protected PasswordAuthentication getPasswordAuthentication(){
         return new PasswordAuthentication(FromEmail,FromEmailPass);
        }
        });
        
        try
        {
            Message msg=new MimeMessage(session);
            msg.setFrom(new InternetAddress(FromEmail));
//            msg.addRecipients(Message.RecipientType.TO, InternetAddress.parse(request.getTalentScoutWorkRequest().getEmail()));
            msg.setSubject("Invitation for a session with Help Provider.");
            msg.setText("Dear "+ request.getTalentScoutWorkRequest().getChildName()+"\n"+"I am here to help you. Join me through the following link for the next encounter."+"\n"+"zoom1.link"+"\n"+"Best,"+"\n"+userAccount.getEmp().getName());
            Transport.send(msg);
            JOptionPane.showMessageDialog(this, "Invitation has been sent successfully.");

        }catch(Exception e)
        {
            System.out.println(""+e);
            //JOptionPane.showMessageDialog(this, "Incorrect E-mail id.Invitation cannot be been sent.");

        }
    }
    
    private int CheckOpenCases(UserAccount userAccount) {
        int a = 0;
        for(MentalHealthCoachWorkRequest request : organization.getWorkQueue().getMentalHealthCoachWorkRequestList())
        {
        
          if (request.getReceiver()==userAccount){
              if (request.getStatus().equalsIgnoreCase("Accepted")){
                  a = a + 1;
              }
          } 
        }
        return a; 
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignRequest;
    private javax.swing.JButton btnCaseComplete;
    private javax.swing.JButton btnEncounters;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JTable tblPsychiatristRequestDetails;
    // End of variables declaration//GEN-END:variables
}
